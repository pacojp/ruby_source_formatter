#!/usr/bin/env ruby

# ruby 1.9.2以上必須
require 'rubygems' # 1.8.7向けrequire (Gemが無いって言われるので)
target = "1.9.2"
if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new(target)
  puts "Use ruby #{target}+ (Your version is #{RUBY_VERSION})"
  exit(1)
end

require 'ripper'
require 'pp'

module RubySourceFormatter

  # この文字で始まった場合は意図的な改行処理
  # （カンマで改行するとか）を行わない
  NO_RETS = %w|if unless def|

  # 行がこの文字で始まっている場合は
  # 列調整を行わない(=とかでそろえるやつね)
  ADJUST_EXCEPTSIONS = %w|else end|.concat(NO_RETS)

  def proceed(opt={})
    #cmd = :all
    argv  = opt[:argv]  || ARGV
    input = opt[:input] || STDIN.read
    format(input)
  end

  # デバッグする際はコメントアウト
  def debug(st)
    puts st
  end

  def indent
    @indent ||= 0
    @indent = 0 if @indent < 0
    "  " * @indent
  end

  def plus_indent
    @indent ||= 0
    @indent += 1
    debug "plus_indent"
    debug "indent:#{@indent}"
  end

  def minus_indent
    @indent ||= 1
    @indent -= 1
    debug "minus_indent"
    debug "indent:#{@indent}"
  end

  def add(st)
    st = '' unless st
    debug "add:#{st}"
    init_line
    @last_action_return = false
    @line.last << st
  end

  def init_line
    unless @line
      debug "init_line"
      @line           = [indent]
      @no_ret_counter = 0
      @block          = false
      @indent_next    = false
    end
  end

  def last?
    @next.nil?
  end

  def block?
    @block == true
  end

  def start_block
    @block = true
  end

  def ret(force=false)
    debug "try_return:"
    debug "@indent_next:#{@indent_next}"
    debug "@last_action_return:#{@last_action_return}"

    return false unless @line
    return false if @last_action_return

    if force || last? || next_on != :on_comment
      debug "do_ret:"
      @last_action_return = true
      @line.last.rstrip!
      @lines << @line
      plus_indent if @indent_next
      @line = nil
      return true
    else
      return false
    end
  end

  def count_tl_nl_or(on,_til=nil)
    i = @array_index + 1
    cnt = 0
    if Array === _til
      til = _til
    else
      til = [_til]
    end
    while obj = @array[i][1] do
      cnt += 1 if obj == on
      break if %w[:on_nl, :on_ignored_nl].include?(on)
      break if til.include?(obj)
      i +=1
    end

    debug "count_tl_nl_or:[target:#{on}/count:#{cnt}]"
    cnt
  end

  def return?
    (!block? && !next?(:on_comment) && @no_ret_counter < 1 && !@indent_next).tap{|ret| debug "return?:#{ret}"}
  end

  def op(c,plus_space=false)
    debug "op:#{c}"
    @last_action_return = false
    init_line

    if return? && @line.size == 1
      @indent_next = true if NO_RETS.include?(c)
      #@line.last.rstrip!
      if c
        @line << c
        @line << " "
      else
        @line << ""
      end
      @last_action_return = true
    else
      case c
      when '**'
        add("#{c}")
      when '|'
        # each do || の想定
        # 対応する@no_ret_counter -= 1 はない（いらんやろ）
        @no_ret_counter += 1
        debug "block?:#{block?}"
        debug "@block_attr_started:#{@block_attr_started}"
        if block? && @block_attr_started
          add("#{c} ")
          @block_attr_started = false
        else
          @block_attr_started = true if block?
          add("#{c}")
        end
      else
        if c
          add("#{c} ")
        else
          add c
        end
      end
    end
  end

  def set_next_previous
    @next     = nil
    @previous = nil

    return if @array.size < 2
    if @array_index > 0
      @previous = @array[@array_index - 1] rescue nil
    end
    @next = @array[@array_index + 1] rescue nil
  end


  def next_on
    @next[1] if @next
  end

  def previous_on
    @previous[1] if @previous
  end

  def init
    @lines          = []
    @indent         = 0
    @no_ret_counter = 0
    @last_action_return = false
  end

  def line_now
    init_line unless @line
    @line.join(' ')
  end

  def next?(*opt)
    opt.include?(next_on)
  end

  def previous?(*opt)
    opt.include?(previous_on)
  end

  def format(st)
    debug "=" * 40
    min_indent = 0
    if st =~ /^(\s)+/
      min_indent = $1.size / 2
    end
    # とりあえずハッシュの中身だけをフォーマットしたいときも
    # あるので{}で囲む
    add_brace = false
    if st.strip =~ /^\{/ && st.strip =~ /\}$/
    else
      add_brace = true
      st = "{\n#{st}\n}"
    end

    init
    @array = Ripper.lex(st)

    # 基本インデントを決定する
    @array.each do |ar|
      unless add_brace
        break if ar[1] == :on_lbrace
      end
      if ar[1] == :on_sp
        @indent = (ar[2].size / 2)
        break
      end
    end
    if @indent == 0 && min_indent != 0
      @indent = min_indent
    end
    init_line

    debug "start at @indent:#{@indent}"

    # スペース要素は基本いらないので削除
    @array.delete_if{|ar|ar[1] == :on_sp}

    # メインループ
    @array.each_with_index do |ar,i|
      debug "--"
      debug "@line:#{@line.inspect}"
      debug "c:#{ar[2]}"
      debug ar.inspect
      @array_index = i

      if add_brace
        if i == 0 || i >= @array.size - 1
          debug "SKIPPING!"
          next
        end
      end

      # 次の要素が何かで処理が変わる場合があるので代入
      set_next_previous

      c = ar[2]
      case type = ar[1]
      when :on_lbrace
        # ハッシュ内の組み合わせが2つ以下の場合の想定
        # {}
        # {a:1,b:2}
        if count_tl_nl_or(:on_comma,:on_rbrace) < 2
          @no_ret_counter += 1
        end
        if next? :on_rbrace, :on_op
          @no_ret_counter += 1
        end
        if previous? :on_ident
          start_block
        end
        if return?
          if !@line || @line.last != ""
            ret
          end
          add c
          plus_indent
          ret
        else
          if next? :on_nl,:on_ignored_nl,:on_rbrace
            add c
          else
            add "#{c} "
          end
        end
      when :on_rbrace
        if return?
          minus_indent
          ret
          add c
          ret
        else
          if next? :on_comment
            add "#{c} "
          else
            add c
          end
        end
        if previous? :on_lbrace
          @no_ret_counter -= 1
        end
      when :on_op
        op c
      when :on_comma
        add ","
        if return?
          add " " unless ret
        else
          add " "
        end
      when :on_label
        add "#{c} "
        op nil
      when :on_lbracket,:on_lparen
        add c
        @no_ret_counter += 1
      when :on_rbracket,:on_rparen
        if next? :on_comma,:on_rparen,:on_period
          add c
        else
          add "#{c} "
        end
        @no_ret_counter -= 1
      when :on_semicolon
        if next? :on_nl, :on_ignored_nl
          add c
          ret
        else
          add "#{c} "
        end
      when :on_kw
        case c
        when *NO_RETS
          add ''
          op c
          @no_ret_counter += 1
          debug "@no_ret_counter:#{@no_ret_counter}"
        when 'end'
          minus_indent
          unless previous? :on_nl
            ret
          end
          add c
        when 'else'
          minus_indent
          ret
          add c
          plus_indent
          ret
        when 'do'
          @no_ret_counter += 1 # これ以降自動で改行しない
          @indent_next = true
          @block = true
          add "#{c} "
        else
          if next? :on_comma,:on_rbracket,:on_semicolon
            add c
          else
            add "#{c} "
          end
        end
      when :on_comment
        #ret unless return?
        add c
        ret(true) # コメントの後は強制改行
      when :on_ignored_nl
        #ret
        ret true
      when :on_nl
        ret true
      when :on_space
      when :on_tstring_beg,:on_tstring_content,:on_symbeg,:on_period
        add c
      else
        debug "line_now:#{line_now}"
        ns = " "
        if next?(
          :on_comma,:on_period,
          :on_lparen,:on_rparen,
          :on_lbracket,:on_rbracket)
          ns = ''
        end
        ns = '' if @next[2] == '**'
        ns = '' if next?(:on_op) && @next[2] == '|'

        add "#{c}#{ns}"
        if type == :on_ident && next?(:on_tstring_beg,:on_ident)
          # ident -> string_beg の流れはメソッドコールなので
          # op処理をする
          op nil
        end
      end
      debug "@line:#{@line.inspect}"
    end
    # メインループ終了

    ret if @line
    while @lines[0] == [""]
      @lines.delete_at(0)
    end
    while @lines[-1] == [""]
      @lines.delete_at(-1)
    end
    max_len = 0
    @lines.each do |ar|
      # コメントオンリー行スキップ
      next if ar[0].strip =~ /^(#|#{ADJUST_EXCEPTSIONS.join("|")})/
      #next if ar.size < 3
      max_len = ar[0].size if ar[0].size > max_len
    end
    debug @lines.pretty_inspect
    debug "max_len:#{max_len}"
    @lines.map do |ar|
      if ar.size < 2
        ar.join("")
      else
        # HACKME 以下きれいに、、、、
        if ar[1] == ""
          ar[0] + (' ' * (max_len - ar[0].size)) + '' + ar[2..-1].join(" ")
        elsif NO_RETS.include? ar[1]
          ar[0] + ar[1..-1].join("")
        elsif ar.size == 2 && ar[1] == "="
          ar.join("")
        elsif ar[1] == "=" && ar[2] == "{"
          ar.join("")
        else
          head = ar.delete_at(0)
          head + (' ' * (max_len - head.size)) + ar.join("")
        end
      end
    end.join("\n").tap{|o| debug o}
  end
end

if __FILE__ == $0
  extend RubySourceFormatter
  puts proceed
end

